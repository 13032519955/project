
/** 五子棋代码 */
        let num = 0;
        let ul = document.querySelector('ul');
        ul.onclick = (e)=>{
            let ele = e.target;
            if (ele.tagName == 'SPAN'){
                // 判断先手还是后手,先手为红色，后手为绿色
                if (num%2){
                    if (ele.className == 'active1' || ele.className == 'active2'){
                        return;
                    }else{
                        ele.className = 'active1';
                        num++;
                    }
                }else{
                    if (ele.className == 'active1' || ele.className == 'active2'){
                        return;
                    }else{
                        ele.className = 'active2   ';
                        num++;
                    }
                }
            }
            console.log(e.target.tagName, e.target.classList);
        }
        
        // 封装加载图片的promise
        // let loadImg = (src)=>{
        //     return new Promise((resolve, reject)=>{
        //         let img = new Image();
        //         img.onload = ()=>{
        //             resolve(img);
        //         }
        //         img.onerror = ()=>{
        //             reject(new Error());
        //         }
        //     })
        // }

        // const imgs = ['url1', 'url2', 'url3'];
        // // 封装异步函数加载图片
        // async function f(){
        //     for (let i=0,len=imgs.length; i<len; i++){
        //         let img = await loadImg(imgs[i]);
        //         document.body.appendChild(img);
        //     }
        // }
       
        // f();
  3.写一个有效的算法完成矩阵搜索，这个矩阵有如下特点：

  1) 矩阵中的每行数字都是经过排序的，从左到右依次变大。

  2) 每行的第一个数字都比上一行的最后一个数字大

        // 矩阵搜索题
        /**
            例如：
            [
                [2,   4,  8,  9],
                [10, 13, 15, 21],
                [23, 31, 33, 51]
            ]
            实现一个函数，搜索这个数组
            输入：4，返回：true
            输入：3，返回：false
            你等下发邮件，我好管理。
        */

        const arr =  [
                [2,   4,  8,  9],
                [10, 13, 15, 21],
                [23, 31, 33, 51]
            ];
        // let num = 4;
        

        // 一维数组二分法查找
        function searchArray(arr, num){
            console.log('arr...', arr, num);
            let len = arr.length;
            if (arr[0] > num || arr[len-1] < num){
                return false;
            }else {
                let mid = Math.floor(arr.length/2);
                if (arr[mid] > num){
                    return searchArray(arr.slice(0, mid-1), num);
                }else if(arr[mid] < num){
                    return searchArray(arr.slice(mid+1, len), num);
                }else{
                    return true;
                }
            }
        }

        // 二维数组二分查找
        function search(arr, num){
            console.log(arr);
            let len = arr.length,
                arrLen = arr[0].length;
            let middle = Math.floor(arr.length/2);
            if (arr[middle][0] > num ){
                // 当最小值小于num，在前面查找
                return search(arr.slice(0, middle), num);
            }else if(arr[middle][arrLen-1] < num){
                // 当最大值大于num，在后面查找
                return search(arr.slice(middle, len-1), num);
            }else{
                // 在这中间，调用一维数组查找方法
                return searchArray(arr[middle], num);
            }
        }
        let result = search(arr, 10);
        console.log('查询结果...', result);

1.自己对react的理解， 
2.虚拟dom实现的原理以及怎么实现， 
3.跨域
4怎么创建一个类，
5.get和post的区别，                              
6.自己的优缺点，v-if和v-show的区别 箭头函数和普通函数的区别，
7.react的生命周期函数。闭包继承原型链。虚拟dom。页面性能优化。                 
8.react里面的坑。
9.js中dom事件，自己有没有封装过组件
1.react虚拟dom是怎么回事
2.js如何创建一个对象
3.如何清除浮动
4.如何想让一个元素在页面看不见
5.react-router的原理
6.盒模型
7.页面中的性能优化
8.如何解决跨域的，jsonp有什么缺点
9.如果你接到一个项目如何从头开始的(需求，技术选型，技术环境，依赖哪些组件)
10.js的继承（口述代码）
11.闭包（闭包有什么缺点）
12.js的作用域有哪些
13.安全隐患
14.css盒模型
15.js兼容（举例），webpack配置，。react生命周期，。                         
16.props和state改变时，触发哪些生命钩子，。                                         17.redux理解redux流程，koa，let、const、var，node.js，session、cookie、localstorage，es6方法，
18.vue和react区别
css盒模型
js兼容（举例），webpack配置，。react生命周期，。                          
20.props和state改变时，触发哪些生命钩子，。                                         21.redux理解redux流程，koa，let、const、var，node.js，session、cookie、localstorage
22es6方法，vue和react区别React的生命周期函数中，当props改变的时候 会引发的后续变化， rander（）函数什么时候执行

2. redux数据流通的过程

3. react的diff算法

4. react16中更新的内容

5. ES6的常用语法 ES7中的新语法

6. react和vue的区别

7. http请求流程

8. 做过哪些实际上的优化

9. react高阶组件

10. 怎样处理版本分支